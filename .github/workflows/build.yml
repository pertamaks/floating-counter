# .github/workflows/build.yml

# Name of the workflow as it will appear in the "Actions" tab on GitHub
name: Build Cross-Platform Executables

# This workflow runs on every push to the 'main' branch
on:
  push:
    branches: [ "main" ]

jobs:
  # --- Job 1: Build the Windows Executable ---
  build-windows:
    # Use the latest version of the Windows virtual machine
    runs-on: windows-latest

    steps:
      # Step 1: Check out your repository's code so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up a Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Specify the Python version

      # Step 3: Install the necessary Python libraries
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyside6 pyinstaller

      # Step 4: Run PyInstaller to create the versioned .exe file
      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed --icon="counter_icon.ico" --name="FloatingCounter-v${{ github.run_number }}" main.py

      # Step 5: Upload the generated .exe file as an artifact
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: FloatingCounter-v${{ github.run_number }}
          path: dist/FloatingCounter-v${{ github.run_number }}.exe

  # --- Job 2: Build the macOS Application ---
  build-macos:
    # Use the latest version of the macOS virtual machine
    runs-on: macos-latest

    steps:
      # Step 1: Check out your repository's code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up a Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install the necessary Python libraries
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyside6 pyinstaller

      # Step 4: Run PyInstaller to create the versioned .app file
      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed --icon="counter_icon.ico" --name="FloatingCounter-v${{ github.run_number }}" main.py

      # Step 5: The .app is a folder. We need to zip it before uploading.
      - name: Zip the .app file
        run: zip -r FloatingCounter-v${{ github.run_number }}.zip dist/FloatingCounter-v${{ github.run_number }}.app

      # Step 6: Upload the generated .zip file as an artifact
      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: FloatingCounter-v${{ github.run_number }}
          path: FloatingCounter-v${{ github.run_number }}.zip